//bibliotecas
#include <p18F4550.h>
#include <delays.h>
#include <stdio.h>
#include <stdlib.h>
#include <timers.h>
#include "config_PIC18F4550.h"
//definção de entradas
//#define Ferramentas PORTBbits
#define FerramentaA PORTAbits.RA0
#define FerramentaB PORTAbits.RA1
#define FerramentaC PORTAbits.RA2
#define FerramentaD PORTAbits.RA3
#define FerramentaE PORTAbits.RA4
#define FerramentaF PORTAbits.RA5
#define FerramentaG PORTBbits.RB0
#define FerramentaH PORTBbits.RB1
#define FerramentaI PORTBbits.RB2
#define FerramentaJ PORTBbits.RB3
#define FerramentaK PORTBbits.RB4
#define FerramentaL PORTBbits.RB5
#define FerramentaM PORTBbits.RB6
#define FerramentaN PORTBbits.RB7
#define FerramentaO PORTCbits.RC0
#define FerramentaP PORTCbits.RC1
#define FerramentaQ PORTCbits.RC2
#define FerramentaR PORTCbits.RC4
#define FerramentaS PORTCbits.RC5
#define FerramentaT PORTCbits.RC6
#define FerramentaU PORTCbits.RC7
	//botoes
#define Lock PORTEbits.RE1
//definição de saidas
	//LEDs
#define Led PORTEbits.RE2
	//BUZZER
#define PWM_OUT PORTEbits.RE0
	//DISPLAY1
#define DATAa PORTDbits.RD0
#define DATAb PORTDbits.RD1
#define DATAc PORTDbits.RD2
#define DATAd PORTDbits.RD3
	//DISPLAY2
#define DATAe PORTDbits.RD4
#define DATAf PORTDbits.RD5
#define DATAg PORTDbits.RD6
#define DATAh PORTDbits.RD7





//VARIAVEIS
int n_ferramentas=21;
unsigned CanGetFerramentas=0;
unsigned alarme=0;
unsigned ferramentas_disp[21];
unsigned temp[21];
int ferramentafalta=0;
//CONFIG VAR
	//delay
int CRYSTAL = 20000000;
void Delay_ms(float ms){
	int CICLO=0;
	ms=ms*1000;
	if(ms>=0.01){
		CICLO=(ms*CRYSTAL)/40000;
		Delay10KTCYx(CICLO);
	}else if(ms<=0.01 && ms>0.001){
		CICLO=(ms*CRYSTAL)/4000;
	 	Delay1KTCYx(CICLO);
	}else if(ms<=0.001 && ms<0.0001){
		CICLO=(ms*CRYSTAL)/400;
		Delay100TCYx(CICLO);
	}else if(ms<0.00001){
		CICLO=(ms*CRYSTAL)/40;
		Delay10TCYx(CICLO);
	}
}

void Delay(float s){
	int CICLO=0;
	if(s>=0.01){
		CICLO=(s*CRYSTAL)/40000;
		Delay10KTCYx(CICLO);
	}else if(s<=0.01 && s>0.001){
		CICLO=(s*CRYSTAL)/4000;
	 	Delay1KTCYx(CICLO);
	}else if(s<=0.001 && s<0.0001){
		CICLO=(s*CRYSTAL)/400;
		Delay100TCYx(CICLO);
	}else if(s<0.00001){
		CICLO=(s*CRYSTAL)/40;
		Delay10TCYx(CICLO);
	}
}


//configurar entradas e saidas




void check_ferramentas(void){
	ferramentas_disp[1]=FerramentaB;
	ferramentas_disp[0]=FerramentaA;
	ferramentas_disp[2]=FerramentaC;
	ferramentas_disp[3]=FerramentaD;
	ferramentas_disp[4]=FerramentaE;
	ferramentas_disp[5]=FerramentaF;
	ferramentas_disp[6]=FerramentaG;
	ferramentas_disp[7]=FerramentaH;
	ferramentas_disp[8]=FerramentaI;
	ferramentas_disp[9]=FerramentaJ;
	ferramentas_disp[10]=FerramentaK;
	ferramentas_disp[11]=FerramentaL;
	ferramentas_disp[12]=FerramentaM;
	ferramentas_disp[13]=FerramentaN;
	ferramentas_disp[14]=FerramentaO;
	ferramentas_disp[15]=FerramentaP;
	ferramentas_disp[16]=FerramentaQ;
	ferramentas_disp[17]=FerramentaR;
	ferramentas_disp[18]=FerramentaS;
	ferramentas_disp[19]=FerramentaT;
	ferramentas_disp[20]=FerramentaU;
	if(CanGetFerramentas){
		int i;
		for(i=0;i<n_ferramentas;i++){
			temp[i]=ferramentas_disp[i];
		}
	}else{
		int i;
		for(i=0;i<n_ferramentas;i++){
			if(temp[i]!=ferramentas_disp[i] && temp[i]==1){
				alarme=1;
				ferramentafalta=i;
				i=n_ferramentas;
			}
		}
	}
	if(alarme && temp[ferramentafalta]==ferramentas_disp[ferramentafalta]){
		alarme=0;
	}
}

void check_button(void){
	if (Lock==0){
		//Delay10KTCYx(50);
		Delay_ms(10);
		if (Lock==0){
			CanGetFerramentas=~CanGetFerramentas;
		}
	}
}

void print(int j){
	int num1=j%10;
	int num2=j/10;
	switch(num1){
		case 0:
			DATAa=0;
			DATAb=0;
			DATAc=0;
			DATAd=0;
		break;
		case 1:
			DATAa=1;
			DATAb=0;
			DATAc=0;
			DATAd=0;
		break;
		case 2:
			DATAa=0;
			DATAb=1;
			DATAc=0;
			DATAd=0;
		break;
		case 3:
			DATAa=1;
			DATAb=1;
			DATAc=0;
			DATAd=0;
		break;
		case 4:
			DATAa=0;
			DATAb=0;
			DATAc=1;
			DATAd=0;
		break;
		case 5:
			DATAa=1;
			DATAb=0;
			DATAc=1;
			DATAd=0;
		break;
		case 6:
			DATAa=0;
			DATAb=1;
			DATAc=1;
			DATAd=0;
		break;
		case 7:
			DATAa=1;
			DATAb=1;
			DATAc=1;
			DATAd=0;
		break;
		case 8:
			DATAa=0;
			DATAb=0;
			DATAc=0;
			DATAd=1;
		break;
		case 9:
			DATAa=1;
			DATAb=0;
			DATAc=0;
			DATAd=1;
		break;
	}
	switch(num2){
		case 0:
			DATAe=0;
			DATAf=0;
			DATAg=0;
			DATAh=0;
		break;
		case 1:
			DATAe=1;
			DATAf=0;
			DATAg=0;
			DATAh=0;
		break;
		case 2:
			DATAe=0;
			DATAf=1;
			DATAg=0;
			DATAh=0;
		break;
		case 3:
			DATAe=1;
			DATAf=1;
			DATAg=0;
			DATAh=0;
		break;
		case 4:
			DATAe=0;
			DATAf=0;
			DATAg=1;
			DATAh=0;
		break;
		case 5:
			DATAe=1;
			DATAf=0;
			DATAg=1;
			DATAh=0;
		break;
		case 6:
			DATAe=0;
			DATAf=1;
			DATAg=1;
			DATAh=0;
		break;
		case 7:
			DATAe=1;
			DATAf=1;
			DATAg=1;
			DATAh=0;
		break;
		case 8:
			DATAe=0;
			DATAf=0;
			DATAg=0;
			DATAh=1;
		break;
		case 9:
			DATAe=1;
			DATAf=0;
			DATAg=0;
			DATAh=1;
		break;
	}
}

void check_alarme(void){
	if (alarme){
		if(PWM_CONFIG==0){
			PWM_UPDATE=1;
			FREQUENCY=50;
			PWM_CONFIG=1;
			PWM_ON=1;
			PWM();
		}
	}else{
		PWM_ON=0;
	}
}

void set_led(void){
	Led=CanGetFerramentas;	
}

int verificar_ferramentas(void){
	int i;
	int j=0;
	for (i=0; i<=n_ferramentas;i++){
		if(ferramentas_disp[i]==1){
			j++;
		}
	}
	return (j);
}

void main(void){

PORTA = 0X00;                       //Clear PORTA
PORTB = 0X00;                       //Clear PORTB
PORTC = 0X00;                       //Clear PORTC
PORTD = 0X00;                       //Clear PORTD
PORTE = 0x00;                       //Clear PORTE

LATA = 0X00;                       //Clear PORTA
LATB = 0X00;                       //Clear PORTB
LATC = 0X00;                       //Clear PORTC
LATD = 0X00;                       //Clear PORTD
LATE = 0x00;                       //Clear PORTE

TRISA=0b111111;
TRISB=0b11111111;
TRISC=0b1111111;
TRISD=0b00000000;
TRISE=0b010;

ADCON1=15; //jesus falou que é 15 e pronto. para de testar

	while(1){
/*
	DATAg=~DATAg;
	Delay(100);
*/
		check_ferramentas();
		print(verificar_ferramentas());
		check_button();
		set_led();
//		PWM_OUT=alarme;
		check_alarme();	

	}
}
